@using DAL.Entities
@model UserProfile

@{
    ViewBag.Title = "Create";
    ViewBag.ActiveMenu = "System";
    ViewBag.ActiveSubMenu = "UserProfile";
}
@* @section pageTitle {
   <h1><i class="fa fa-user"></i>
        User Profile
                        <small>Edit Profile</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="/"><i class="fa fa-home"></i>Home</a></li>
        <li><a href="/UserProfile"><i class="fa fa-user"></i>Profile management</a></li>
        <li class="active">Edit Profile</li>
    </ol>
}*@

<div class="row">
    <div class="col-md-12">
        <div class="box box-warning">

            @using (Html.BeginForm("Edit", "UserProfile", FormMethod.Post, new { @id = "EditProfileForm", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.UserId)
                <div class="box-header">
                    <h3 class="box-title">Profile Detail</h3>
                </div> 
       
                <div class="box-body">
                    @if (ViewBag.Message != null)
                    {
                        <div class="callout callout-danger">
                            @ViewBag.Message
                        </div>
                    }
                    <div class="row">
                        <div class="form-group col-md-3">
                            @Html.LabelFor(model => model.UserName, "Username")
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", placeholder = "Username" })
                        </div>
                        
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.str_Fullname, "Full name")
                            @Html.TextBoxFor(model => model.str_Fullname, new { @class = "form-control", placeholder = "First name" })
                        </div>
                      
                    </div>              

                    <div class="row">
                      
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.str_Email, "Email")
                            @Html.TextBoxFor(model => model.str_Email, new { @class = "form-control", placeholder = "Company email" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.int_Group_Roles_Id, "Group Role")
                            @Html.DropDownListFor(model => model.int_Group_Roles_Id, (SelectList)ViewBag.GroupRole, "- - - Select - - -", new { @class = "form-control" })
                        </div>   
                    </div>
                  
                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Department_Id, "Department")
                            @Html.DropDownListFor(model => model.Department_Id, (SelectList)ViewBag.Current_Department_Id, "- - - Select - - -", new { @class = "form-control" })
                        </div>   
                    </div>
                </div>
                <div class="box-footer">
                    <button type="submit" class="btn btn-warning">Save</button>
                    <button type="button" class="btn btn-default" id="btCancel">Cancel</button>
                </div>

            }
        </div>
    </div>
</div>
<script>
    $("#btCancel").click(function () {
        window.location.href = "/UserProfile";
    });


    $(document).ready(function () {

   
        $('#EditProfileForm').bootstrapValidator({
            // To use feedback icons, ensure that you use Bootstrap v3.1.0 or later
            feedbackIcons: {
                required: 'glyphicon glyphicon-asterisk',
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            live: 'enabled',
            message: 'This value is not valid',
            submitButtons: 'button[type="submit"]',
            fields: {
                UserName: {
                    message: 'The Username is not valid',
                    validators: {
                        notEmpty: {
                            message: 'The Username is required and cannot be empty'
                        },
                        stringLength: {
                            min: 0,
                            max: 50,
                            message: 'The Username must be less than 50 characters long'
                        }
                    }
                },
                str_Fullname: {
                    message: 'The Full name is not valid',
                    validators: {
                        notEmpty: {
                            message: 'The Full name  is required and cannot be empty'
                        },
                        stringLength: {
                            min: 0,
                            max: 100,
                            message: 'The Full name  must be less than 100 characters long'
                        }
                    }
                },
              
                str_Email: {
                    validators: {
                        emailAddress: {
                            message: 'The value is not a valid email address'
                        }
                    }
                },
              
            }

        });
    });
</script>
