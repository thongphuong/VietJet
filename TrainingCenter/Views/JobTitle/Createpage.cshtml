@using DAL.Entities
@using DAL.Repositories
@using DAL.UnitOfWork
@model Job_Tiltle
@{
    int id = ViewBag.id;
    var mModel = Model;
    Layout = "~/Views/Shared/_Layout.cshtml";


    UnitOfWork _uow = new UnitOfWork();
    IRepository<CAT_GROUPSUBJECT> _repoGroupSubject = _uow.Repository<CAT_GROUPSUBJECT>();
    IEnumerable<CAT_GROUPSUBJECT> groupSubject = _repoGroupSubject.GetAll(a => a.bit_Isactive == true);

    IRepository<Title_Standard> _repoInstructorAbility = _uow.Repository<Title_Standard>();
    IRepository<Subject> _repoSubject = _uow.Repository<Subject>();

    int instructorId = -1;

    var listInstructorSubject =
    _repoInstructorAbility.Get(a => a.Job_Title_Id == instructorId).Select(a => a.Subject_Id);

    IEnumerable<Subject> availableSubject = _repoSubject.Get(a => !listInstructorSubject.Contains(a.Subject_Id) && !a.bit_Deleted && !a.Subject2.bit_Deleted && a.int_Course_Type != (int)Constants.CourseType.General, a => a.OrderBy(p => p.str_Name));
    IEnumerable<Subject> assignedSubject = _repoSubject.Get(a => listInstructorSubject.Contains(a.Subject_Id) && !a.bit_Deleted && !a.Subject2.bit_Deleted && a.int_Course_Type != (int)Constants.CourseType.General, a => a.OrderBy(p => p.str_Name));

    IRepository<Department> _repoDepartment = _uow.Repository<Department>();
    IEnumerable<Department> deps = _repoDepartment.Get(a => !a.bit_Deleted, x => x.OrderBy(a => a.Department_Id));
}


@section breadcrumb{

    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header"><i class="fa fa-group"></i>   Master data - Job Tiltle - Deatails</h1>
            <ol class="breadcrumb">
                <li><a href="/">Home</a></li>
                <li> Master data</li>
                <li class="active">Job Tiltle - Details</li>
            </ol>
        </div>
    </div>
}

@functions{
    public string loaddepartment(int? parentid, int level, int? department_id)
    {
        UnitOfWork _uow = new UnitOfWork();
        IRepository<Department> _repoDepartment = _uow.Repository<Department>();
        string result = string.Empty;
        bool parent = false;
        var data = _repoDepartment.Get(a => !a.bit_Deleted);
        if (parentid == null)
        {
            data = data.Where(a => !a.bit_Deleted && a.int_Parent_Id == null);
            parent = true;
        }
        else
        {
            data = data.Where(a => !a.bit_Deleted && a.int_Parent_Id == parentid);
        }

        if (data.Count() == 0)
            return result;
        else
        {
            foreach (var item in data)
            {
                string selected = "";
                if (item.Department_Id == department_id)
                {
                    selected = "selected";
                }
                string khoangtrang = "";
                for (int i = 0; i < level; i++)
                {
                    khoangtrang += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                }

                result += "<option value='" + item.Department_Id + "' style='font-size:" + (18 - (level + 2)) + "px;' " + selected + " >" + khoangtrang + "+ " + item.str_Name;
                result += "</option>";
                result += loaddepartment(item.Department_Id, level + 1, department_id);
            }
        }
        return result;
    }
}

@section Scripts{
    
<script type="text/javascript">
    $(".line_50").addClass("active");

    $('#availableFunc').tree({
    });
    $('#assignedFunc').tree({
    });
    $(".scrollable-content").niceScroll({ styler: "fb", cursorcolor: "#4ECDC4", cursorwidth: '6', cursorborderradius: '10px', background: '#404040', spacebarenabled: false, cursorborder: '', zindex: '1000' });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('select:not([name$="_length" ])').select2({
            width: '100%',
            allowClear: true
        }).addClass('form-control searchText1');

        $('#role-edit-btnRight').click(function () {
            var listchecked = $('input.availableFunc:checked');
            var availableParentFunc;
            for (var i = 0; i < listchecked.length; i++) {
                var parentid = $(listchecked[i]).data("id");
                var parentnameto = $(listchecked[i]).data("parentname");
                var name = $(listchecked[i]).next().text();
                var value = $(listchecked[i]).val();
                var assignparentFunc = $('.assignedParentFunc' + parentid);
                availableParentFunc = $('#available' + parentid).children();
                $('.availableParentFunc' + parentid).attr('checked', false);
                if (assignparentFunc.length !== 0) {
                    $("#assigned" + parentid).append("<li><input data-id='" + parentid + "' data-parentname='" + parentnameto + "'  class='assignedFunc' name='assignFunc' type='checkbox'/><input   value='" + value + "' name='assignFunc'  type='hidden'/><span>" + name + "</span></li>");
                } else {
                    $("#assign").append("<li><input type='hidden' value='" + parentid + "' /><input name='assignFunc' class='assignedParentFunc" + parentid + "' value='" + parentid + "' type='checkbox'><span>" + parentnameto + "</span> <ul id='assigned" + parentid + "'></u>");
                    $("#assigned" + parentid).append("<li><input data-id='" + parentid + "' data-parentname='" + parentnameto + "' class='assignedFunc' type='checkbox'/><input   value='" + value + "' name='assignFunc' checked type='hidden'/><span>" + name + "</span></li>");
                }
                $(listchecked[i]).parent().remove();
                if (availableParentFunc.length <= 2) {
                    $('.availableParentFunc' + parentid).parent().remove();
                }
            }
            $('.availableParentFunc' + parentid).attr('checked', false);
        });
        $('#role-edit-btnLeft').click(function () {
            var listchecked = $('input.assignedFunc:checked');
            var assignparentFunc;
            for (var i = 0; i < listchecked.length; i++) {
                var parentid = $(listchecked[i]).data("id");
                var parentname = $(listchecked[i]).data("parentname");
                var name = $(listchecked[i]).next().next().text();
                var assignparentFunc = $('#assigned' + parentid).children();
                availableParentFunc = $('.availableParentFunc' + parentid);
                if (availableParentFunc.length !== 0) {
                    $("#available" + parentid).append("<li><input data-id='" + parentid + "' data-parentname='" + parentname + "' class='availableFunc' type='checkbox'><span>" + name + "</span></li>");
                } else {
                    $("#available").append("<li><input class='availableParentFunc" + parentid + "' type='checkbox'><span>" + parentname + "</span> <ul id='available" + parentid + "'></u>");
                    $("#available" + parentid).append("<li><input data-id='" + parentid + "' data-parentname='" + parentname + "' class='availableFunc' type='checkbox'><span>" + name + "</span></li>");
                }
                $(listchecked[i]).parent().remove();
                if (assignparentFunc.length === 1) {
                    $('.assignedParentFunc' + parentid).parent().remove();
                }
            }
        });
    })
    function submit() {
        var form = $("#createform").serialize();

        $.ajax({
            type: 'POST',
            url: "/JobTitle/Modify",
            datatype: 'json',
            data: form,
            success: function (data) {
                $("#messageout").html('');
                $("#messageout").append(data);
                var sTable = $("#Subject").dataTable();
                sTable.fnDraw();
            }
        });
    }

</script>
}

