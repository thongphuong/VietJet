@using TMS.Core.App_GlobalResources
@using TMS.Core.Utils
@using Utilities

@model TMS.Core.ViewModels.UserModels.UserProfile

<div class="panel-body">
    <div class="tab-content">
        <div class="col-md-3">
            <div class="profile-sidebar box-shadow">
                <p id="showavatar">
                    @*<img src="@((string.IsNullOrEmpty(Model.nameImage) || Model.nameImage.StartsWith("NoAvata")) ? "/Content/img/NoAvata.png" : string.Format("{0}{1}", UtilConstants.PathImage, Model.nameImage))" class="img-responsive center-block" id="blah2"/>*@
                    <img src="@(((string.IsNullOrEmpty(Model.nameImage) || Model.nameImage.StartsWith("NoAvata")) ? UtilConstants.PathImage+"NoAvata.png" :
                                 AppUtils.getAppSetting("AWSLinkS3") + AppUtils.getAppSetting("PathImage").Substring(1) +Model.nameImage))" class="img-responsive center-block" id="blah2" />
                </p>
                <div class="profile-button">
                    <label class="btn btn-default btn-file">
                        <i class="fa fa-camera" aria-hidden="true" style="font-size: 22px;"></i> <input type="file" name="ImgFile" id="uploadEditorImage" style="display: none;" />
                    </label>
                </div>
            </div>
        </div>
        <div class="tab-pane fade  active in" id="home">
            @Html.HiddenFor(model => model.Id, new Dictionary<string, object>() { { "class", "form-control  createform" } })
            <div class="col-md-9">
                <div class="panel box-shadow">
                    <div class="panel-body center-block">
                        <div class="row">
                            @*<div class="form-group col-lg-6">
                                    <label>@Resource.lblFullName <font color="red">(*)</font></label>
                                    @Html.TextBoxFor(m => m.FullName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => Model.FullName, null, new { @class = "text-danger" })
                                </div>*@
                            <div class="form-group col-lg-4">
                                <label>@Resource.lblFirstName <font color="red">(*)</font></label>
                                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => Model.FirstName, null, new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-lg-4">
                                <label>@Resource.lblLastName <font color="red">(*)</font></label>
                                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => Model.LastName, null, new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-lg-4">
                                <label>@Resource.lblInstructor</label>
                                @Html.DropDownListFor(m => m.InstructorId, new SelectList(Model.Instructors, "Key", "Value", Model.InstructorId), "--- Instructor Eid ---", new Dictionary<string, object>() { { "class", "form-control select createform" }, { "data-placeholder", "---" + @Resource.lblInstructor + "---" }, { "onchange", "checkInstructor(this)" } })

                                @*<select class="form-control select createform" data-placeholder="---Instructor---" data-val="true"  id="InstructorId" name="InstructorId" onchange="checkInstructor(this)" tabindex="-1" aria-hidden="true">
                                    <option value="">--- Instructor Eid ---</option>
                                    @if (Model.Instructors.Any())
                                    {
                                        foreach (var item in Model.Instructors)
                                        {
                                            <option value="@item.Key" @(Model.InstructorId == item.Key ? "selected" : "")>@item.Value</option>
                                        }
                                    }
                                </select>*@


                                @Html.ValidationMessageFor(m => m.InstructorId, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                <label>@Resource.lblUserName <font color="red">(*)</font></label>
                                @if (string.IsNullOrEmpty(Model.UserName))
                                {
                                    @Html.TextBoxFor(m => m.UserName, new Dictionary<string, object>() { { "class", "form-control createform " }, { "placeholder", @Resource.lblUserName } })
                                    @Html.ValidationMessageFor(m => m.UserName, null, new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.UserName, new Dictionary<string, object>() { { "class", "form-control createform " }, { "placeholder", @Resource.lblUserName }, { "readonly", "readonly" } })
                                    @Html.ValidationMessageFor(m => m.UserName, null, new { @class = "text-danger" })
                                }
                            </div>
                            <div class="form-group col-lg-6">
                                <label>@Resource.USER_ADDRESS</label>
                                @Html.TextBoxFor(m => m.Address, new Dictionary<string, object>() { { "class", "form-control createform " }, { "placeholder", @Resource.USER_ADDRESS } })
                                @Html.ValidationMessageFor(m => m.Address, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                @Html.LabelFor(m => m.Email) <label><font color="red">(*)</font></label>
                                @Html.TextBoxFor(m => m.Email, Model.Email, new { @class = "form-control searchText1" })

                            </div>
                            <div class="form-group col-lg-6">
                                <label>@Resource.lblPhone</label>
                                @Html.TextBoxFor(m => m.Numbers, new Dictionary<string, object>() { { "class", "form-control  createform" }, { "placeholder", @Resource.lblPhone } })
                                @Html.ValidationMessageFor(m => m.Numbers, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row" id="teacher">
                            <div class="form-group col-lg-6">
                                <label>@Resource.lblPassword <font color="red">(*)</font></label>
                                @Html.PasswordFor(m => m.Password, new Dictionary<string, object>() { { "class", "form-control createform " }, { "placeholder", @Resource.lblPassword } })
                                @Html.ValidationMessageFor(m => m.Password, null, new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-lg-6">
                                <label>@Resource.USER_COMFRIMPASS <font color="red">(*)</font></label>
                                @Html.PasswordFor(m => m.PasswordConfirm, new Dictionary<string, object>() { { "class", "form-control createform" }, { "placeholder", @Resource.USER_COMFRIMPASS } })
                                @Html.ValidationMessageFor(m => m.PasswordConfirm, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                <label>@Resource.lblRole</label>
                                <select name="Role" id="Role" class="form-control select createform">
                                    @if (Model.Roles != null)
                                    {
                                        foreach (var role in Model.Roles)
                                        {
                                            <option value="@role.Key" @(Model.Role.Contains(role.Key) ? "selected" : "")>@role.Value</option>
                                        }
                                    }
                                </select>
                                @Html.ValidationMessageFor(m => m.Role, null, new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-lg-6">
                                @if (Model.Checksitepermissiondata@*&& Model.CheckGroupUser*@)
{
<label>@Resource.lblGroupUser</label>
<select id="GroupUser" name="GroupUser" class="form-control select createform" multiple="multiple" data-placeholder="--- @Resource.lblGroupUser ---">
    @if (Model.GroupUsers != null)
    {
        foreach (var groupUser in Model.GroupUsers)
        {
            <option value="@groupUser.Key" @(Model.GroupUser != null && Model.GroupUser.Contains(groupUser.Key) ? "selected" : "")>@groupUser.Value</option>
        }
    }
</select>
@Html.ValidationMessageFor(m => m.GroupUser, null, new { @class = "text-danger" })
}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
    </div>
</div>
