!function (e, t) { e.widget("daredevel.tree", { _attachLi: function (t, n, i) { var s = n.find("ul:first"); s.length ? null == i || s.children("li").length < i ? s.append(t) : (0 == i && (i += 1), s.children("li:nth-child(" + i + ")").before(t)) : (s = e("<ul/>"), n.append(s.append(t))) }, _attachNode: function (e, t, n) { if (null == t) { var i = this.element; this._attachLi(e, i, n), this._initNode(e) } else { i = t; this._attachLi(e, i, n), i.removeClass("leaf collapsed").addClass("expanded"), this._initNode(e), this._initNode(i) } }, _buildNode: function (t) { t = e.extend(!0, this.options.defaultNodeAttributes, t); var n = e("<span/>", t.span), i = e("<li/>", t.li); if (e.inArray("checkbox", this.options.components) > -1) { var s = e("<input/>", t.input); i.append(s) } return i.append(n), i }, _create: function () { var t = this; this.element.addClass("ui-widget ui-widget-content daredevel-tree"), this.options.checkbox && this._initCheckboxTree(), this.options.collapsible && this._initCollapsibleTree(), this.options.dnd && this._initDndTree(), this.options.selectable && this._initSelectableTree(), this.options.lazyLoading && this._initLazyTree(), this.element.find("li").each(function () { t._initNode(e(this)) }), null != this.options.nodes && this.options.nodes instanceof Object && t._initFromObject(this.options.nodes), null != this.options.nodesInitUrl && t._initFromAjax(this.options.nodesInitUrl) }, _destroy: function () { e.Widget.prototype.destroy.call(this) }, _detachNode: function (e) { var t = this.parentNode(e), n = t.find("ul:first"); 1 == n.children().length ? (n.detach(), t.removeClass("collapsed expanded").addClass("leaf")) : e.detach(), this._initNode(t) }, _initNode: function (e) { e.children("span:last").addClass("daredevel-tree-label"), this.options.checkbox && this._initCheckboxNode(e), this.options.collapsible && this._initCollapsibleNode(e), this.options.dnd && this._initDndNode(e), this.options.selectable && this._initSelectableNode(e), this.options.lazyLoading && this._initLazyNode(e) }, _initFromObject: function (t) { var n = this; e.each(t, function (e, t) { n.addNode(t) }) }, addNode: function (t, n, i) { var s = this, o = this._buildNode(t); null == n || 0 == n.length ? this._attachNode(e(o), void 0, i) : this._attachNode(e(o), e(n), i), null != t.children && e.each(t.children, function (e, t) { s.addNode(t, o) }), s._trigger("add", !0, o) }, isRoot: function (t) { return 1 == (t = e(t)).parentsUntil(".daredevel-tree").length }, moveNode: function (t, n, i) { this._detachNode(e(t)), null == n || 0 == n.length ? this._attachNode(e(t), void 0, i) : this._attachNode(e(t), e(n), i), this._trigger("move", !0, e(t)) }, parentNode: function (t) { return e(t).parents("li:first") }, removeNode: function (t) { this._detachNode(e(t)), this._trigger("remove", !0, e(t)) }, _allDescendantChecked: function (e) { return 0 == e.find("li input:checkbox:not(:checked)").length }, _checkAncestors: function (e) { e.parentsUntil("daredevel-tree").filter("li").find("input:checkbox:first:not(:checked)").prop("checked", !0).change() }, _checkDescendants: function (e) { e.find("li input:checkbox:not(:checked)").prop("checked", !0).change() }, _checkOthers: function (t) { t.addClass("exclude"), t.parents("li").addClass("exclude"), t.find("li").addClass("exclude"), e(this.element).find("li").each(function () { e(this).hasClass("exclude") || e(this).find("input:checkbox:first:not(:checked)").prop("checked", !0).change() }), e(this.element).find("li").removeClass("exclude") }, _initCheckboxTree: function () { var t = this; this.element.on("click", "input:checkbox:not(:checked)", function () { t.uncheck(t.parentNode(e(this))) }), this.element.on("click", "input:checkbox:checked", function () { t.check(t.parentNode(e(this))) }), "collapse" == this.options.onUncheck.node ? this.element.on("click", "input:checkbox:not(:checked)", function () { t.collapse(t.parentNode(e(this))) }) : "expand" == this.options.onUncheck.node && this.element.on("click", "input:checkbox:not(:checked)", function () { t.expand(t.parentNode(e(this))) }), "collapse" == this.options.onCheck.node ? this.element.on("click", "input:checkbox:checked", function () { t.collapse(t.parentNode(e(this))) }) : "expand" == this.options.onCheck.node && this.element.on("click", "input:checkbox:checked", function () { t.expand(t.parentNode(e(this))) }) }, _initCheckboxNode: function (e) { }, _uncheckAncestors: function (e) { e.parentsUntil("daredevel-tree").filter("li").find("input:checkbox:first:checked").prop("checked", !1).change() }, _uncheckDescendants: function (e) { e.find("li input:checkbox:checked").prop("checked", !1).change() }, _uncheckOthers: function (t) { t.addClass("exclude"), t.parents("li").addClass("exclude"), t.find("li").addClass("exclude"), e(this.element).find("li").each(function () { e(this).hasClass("exclude") || e(this).find("input:checkbox:first:checked").prop("checked", !1).change() }), e(this.element).find("li").removeClass("exclude") }, check: function (t) { if ((t = e(t)).find("input:checkbox:first:not(:checked)").prop("checked", !0).change(), "check" == this.options.onCheck.others ? this._checkOthers(t) : "uncheck" == this.options.onCheck.others && this._uncheckOthers(t), "check" == this.options.onCheck.descendants ? this._checkDescendants(t) : "uncheck" == this.options.onCheck.descendants && this._uncheckDescendants(t), "check" == this.options.onCheck.ancestors) this._checkAncestors(t); else if ("uncheck" == this.options.onCheck.ancestors) this._uncheckAncestors(t); else if ("checkIfFull" == this.options.onCheck.ancestors) { var n = this.isRoot(t), i = this._allDescendantChecked(this.parentNode(t)); !n && i && this.check(this.parentNode(t)) } }, checkAll: function () { e(this.element).find("input:checkbox:not(:checked)").prop("checked", !0).change() }, uncheck: function (t) { (t = e(t)).find("input:checkbox:first:checked").prop("checked", !1).change(), "check" == this.options.onUncheck.others ? this._checkOthers(t) : "uncheck" == this.options.onUncheck.others && this._uncheckOthers(t), "check" == this.options.onUncheck.descendants ? this._checkDescendants(t) : "uncheck" == this.options.onUncheck.descendants && this._uncheckDescendants(t), "check" == this.options.onUncheck.ancestors ? this._checkAncestors(t) : "uncheck" == this.options.onUncheck.ancestors && this._uncheckAncestors(t) }, uncheckAll: function () { e(this.element).find("input:checkbox:checked").prop("checked", !1).change() }, _initCollapsibleTree: function () { var t = this; this.element.on("click", "li span.daredevel-tree-anchor", function () { var n = t.parentNode(e(this)); n.hasClass("collapsed") ? t.expand(n) : n.hasClass("expanded") && t.collapse(n) }) }, _initCollapsibleNode: function (t) { var n = this; t.children("span.daredevel-tree-anchor").length < 1 && t.prepend(e("<span />", { class: "daredevel-tree-anchor" })), t.hasClass("leaf") ? n._markAsLeaf(t) : t.hasClass("collapsed") ? n.collapse(t, !1, !0) : t.hasClass("expanded") ? n.expand(t, !1, !0) : t.is("li:not(:has(ul))") ? n._markAsLeaf(t) : n._markAsExpanded(t) }, _markAsCollapsed: function (e) { var t = e.children("span.daredevel-tree-anchor"); t.removeClass("ui-icon " + this.options.expandUiIcon + " " + this.options.leafUiIcon), this.options.collapseUiIcon.length > 0 && t.addClass("ui-icon " + this.options.collapseUiIcon), e.removeClass("leaf").removeClass("expanded").addClass("collapsed") }, _markAsExpanded: function (e) { var t = e.children("span.daredevel-tree-anchor"); t.removeClass("ui-icon " + this.options.collapseUiIcon + " " + this.options.leafUiIcon), this.options.expandUiIcon.length > 0 && t.addClass("ui-icon " + this.options.expandUiIcon), e.removeClass("leaf").removeClass("collapsed").addClass("expanded") }, _markAsLeaf: function (e) { var t = e.children("span.daredevel-tree-anchor"); t.removeClass("ui-icon " + this.options.collapseUiIcon + " " + this.options.expandUiIcon), this.options.leafUiIcon.length > 0 && t.addClass("ui-icon " + this.options.leafUiIcon), e.removeClass("collapsed").removeClass("expanded").addClass("leaf") }, _unmark: function () { li.removeClass("collapsed expanded leaf") }, collapse: function (t, n, i) { if (t = e(t), null == i && (i = !1), i || !t.hasClass("collapsed") && !t.hasClass("leaf")) { null == n && (n = !0); var s = this; n ? (t.children("ul").hide(this.options.collapseEffect, {}, this.options.collapseDuration), setTimeout(function () { s._markAsCollapsed(t, s.options) }, s.options.collapseDuration)) : (t.children("ul").hide(), s._markAsCollapsed(t, s.options)), s._trigger("collapse", !0, t) } }, collapseAll: function () { var t = this; e(this.element).find("li.expanded").each(function () { t.collapse(e(this)) }) }, expand: function (t, n, i) { if (t = e(t), null == i && (i = !1), i || !t.hasClass("expanded") && !t.hasClass("leaf")) { null == n && (n = !0); var s = this; n ? (t.children("ul").show(s.options.expandEffect, {}, s.options.expandDuration), setTimeout(function () { s._markAsExpanded(t, s.options) }, s.options.expandDuration)) : (t.children("ul").show(), s._markAsExpanded(t, s.options)), s._trigger("expand", !0, t) } }, expandAll: function () { var t = this; e(this.element).find("li.collapsed").each(function () { t.expand(e(this)) }) }, _initDndTree: function () { }, _initDndNode: function (t) { var n = this, i = e("<span/>", { class: "prepended", html: "<br/>" }).droppable({ hoverClass: "over", drop: function (t, i) { var s = e(this).closest("li"); if (n.isRoot(s)) { var o = void 0; n.element } else { o = s.parent().closest("li"); if (e(i.draggable.parent("li")).find(o).length) return } var c = e(e(this).parent("li")).index() + 1; n.moveNode(i.draggable.parent("li"), o, c), n._trigger("drop", t, { draggable: i.draggable, droppable: o }) } }); e(t).find(".daredevel-tree-label:first").after(i), e(t).find(".daredevel-tree-label:first").draggable({ start: function (t, n) { e(this).parent("li").find("ul, .prepended").css("visibility", "hidden"), e(this).parent("li").find(".droppable-label").css("display", "none") }, stop: function (t, n) { e(this).parent("li").find("ul").css("visibility", "visible"), e(this).parent("li").find(".prepended").css("visibility", ""), e(this).parent("li").find(".droppable-label").css("display", "inherit") }, revert: !0, revertDuration: 0 }); i = e("<span/>", { class: "droppable-label", html: "<br/>" }).droppable({ drop: function (t, i) { var s = e(this).closest("li"); e(i.draggable.parent("li")).find(s).length || (n.moveNode(i.draggable.parent("li"), s, 1), n._trigger("drop", t, { draggable: i.draggable, droppable: s })) }, over: function (t, n) { e(this).parent("li").find(".daredevel-tree-label:first").addClass("ui-state-hover") }, out: function (t, n) { e(this).parent("li").find(".daredevel-tree-label:first").removeClass("ui-state-hover") } }); e(t).find(".daredevel-tree-label:first").after(i) }, _initSelectableTree: function () { var t = this; this.element.on("click", ".daredevel-tree-label", function () { var n = e(this); n.hasClass(t.options.selectUiClass) ? t.deselect(e(this).parent(n)) : t.select(e(this).parent("li")) }) }, _deselect: function (e) { e.find("span.daredevel-tree-label:first").removeClass(this.options.selectUiClass), this._trigger("deselect", !0, e) }, _deselectAll: function () { var t = this; this.element.find(".daredevel-tree-label." + this.options.selectUiClass).each(function () { t._deselect(e(this).parent("li")) }) }, _destroySelectable: function () { }, _initSelectableNode: function (e) { }, _select: function (e) { e.find("span.daredevel-tree-label:first").addClass(this.options.selectUiClass), this._trigger("select", !0, e) }, deselect: function (t) { t = e(t), this._deselect(t) }, select: function (t) { t = e(t), this.options.selectUnique && this._deselectAll(), this._select(t) }, selected: function () { var t = this.element.find(".daredevel-tree-label." + this.options.selectUiClass); return e(t).parent() }, _initLazyTree: function () { var t = this; this.options.lazyLoading && t.element.on("treeexpand", function (n, i) { e(this); e(i).find("ul").length || t._lazyAdd(t.options.nodesLazyUrl, e(i)) }) }, _initLazyNode: function (e) { }, _initFromAjax: function (t) { var n = this; e.ajax({ url: t, dataType: "json", beforeSend: function () { }, complete: function () { }, data: {}, success: function (t) { e.each(t.nodes, function (e, t) { n.addNode(t) }) } }) }, _lazyAdd: function (t, n) { var i = this; e.ajax({ url: t, dataType: "json", data: { node: n.attr("id") }, success: function (t) { e.each(t.nodes, function (e, t) { i.addNode(t, n) }) } }) }, options: { defaultNodeAttributes: { span: { html: "new node" }, li: { class: "leaf" }, input: { type: "checkbox" } }, nodes: null, checkbox: !0, onCheck: { ancestors: "check", descendants: "check", node: "", others: "" }, onUncheck: { ancestors: "", descendants: "uncheck", node: "", others: "" }, collapsible: !0, collapseDuration: 500, collapseEffect: "blind", collapseUiIcon: "ui-icon-triangle-1-e", expandDuration: 500, expandEffect: "blind", expandUiIcon: "ui-icon-triangle-1-se", leafUiIcon: "", dnd: !0, drop: function (e, t) { }, selectable: !0, deselect: function (e, t) { }, selectUiClass: "ui-state-active", selectUnique: !0, select: function (e, t) { }, lazyLoading: !1, dataEditUrl: "", nodesInitUrl: "", nodesLazyUrl: "" } }), e.ui.draggable.prototype._getRelativeOffset = function () { if ("relative" == this.cssPosition) { var e = this.element.position(); return { top: e.top - (parseInt(this.helper.css("top"), 10) || 0), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) } } return { top: 0, left: 0 } } }(jQuery);